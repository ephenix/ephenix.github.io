---
layout: post
title:  "Working with XML & PowerShell - Part 1"
date:   2018-10-02 00:35:14 -0600
categories: powershell xml guide series
---

## Introduction

Welcome to Part 1 of our series on working with XML in Powershell.

If you missed part 0, you can find it here: <a class="prev" href="{{page.previous.url}}"> {{page.previous.title}}</a>

As before, you can find the supporting Powershell and XML files on [github](https://github.com/ephenix/XML-Powershell).

In this post, we will cover the following topics:

1. Working With Real Data
2. Setting Values the Hard Way
3. Setting Values using XPath
4. Closing Thoughts

---

## 1.  Working With Real Data

Here is the xml we'll be working with for this example:

[01.xml](https://github.com/ephenix/XML-Powershell/blob/master/01.xml)
```xml
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <system.serviceModel>
        <services>
            <service name="service1" >
                <endpoint address="http://localhost:8000/ServiceModelSample/service.svc"
                          binding="wsHttpBinding" 
                          contract="Microsoft.ServiceModel.Samples.ICalculator" />
                <endpoint binding="wsHttpBinding"
                          address="http://localhost:8000/ServiceModelSample/service2.svc"  
                          contract="Microsoft.ServiceModel.Samples.ICalculator" />
            </service>
        </services>
        <client>
            <endpoint name="endpoint1" binding="wsHttpBinding" bindingConfiguration="WSHttpBinding_IHello" 
                      behaviorConfiguration="IHello_Behavior" address="http://localhost:8000/ServiceModelSamples/service.svc" 
                      contract="IHello">
                <metadata>
                    <wsdlImporters>
                        <extension type="Microsoft.ServiceModel.Samples.WsdlDocumentationImporter, WsdlDocumentation"/>
                    </wsdlImporters>
                </metadata>
                <identity>
                    <servicePrincipalName value="host/localhost" />
                </identity>
            </endpoint>
            <endpoint name="endpoint2" 
                      address="http://localhost:8000/ServiceModelSamples/service2.svc" 
                      binding="wsHttpBinding" 
                      bindingConfiguration="WSHttpBinding_IHello" 
                      behaviorConfiguration="IHello_Behavior" 
                      contract="IHello">
                <metadata>
                    <wsdlImporters>
                        <extension type="Microsoft.ServiceModel.Samples.WsdlDocumentationImporter, WsdlDocumentation"/>
                    </wsdlImporters>
                </metadata>
                <identity>
                    <servicePrincipalName value="host/localhost" />
                </identity>
            </endpoint>
        </client>
        <bindings>
            <wsHttpBinding>
                <binding name="WSHttpBinding_IHello" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard">
                    <readerQuotas maxDepth="32"/>
                    <reliableSession ordered="true" enabled="false" />
                    <security mode="Message">  
                    </security>
                </binding>
            </wsHttpBinding>
        </bindings>
        <behaviors>
            <endpointBehaviors>
                <behavior name="IHello_Behavior ">
                    <clientVia />
                </behavior>
            </endpointBehaviors>
        </behaviors>
    </system.serviceModel>
</configuration>
```

Here's an example web.config for a WCF web application.

One thing that's important to note here -- each of the client and service endpoints is a little different; with differing orders for the attributes, some missing, others formatted on different lines -- this is an example of how using a even a multi-line regex would be insufficient for identifying nodes. This closely mirrors what you'll find in real-world configs as you begin trying to automatically transform them.

## 2. Updating Values the Hard Way

Let's say that, for our build, we need to update our configs to use the development environment URLs on the client side. The services defined in the same file must stay pointed to localhost.

If we attempt to replace all localhost addresses with our app-dev url, it will break our services config, and that's not good.

```PowerShell
$Content = Get-Content "$PSScriptRoot\01.xml" -Raw
$Content = $Content -replace "localhost:8000", "app-dev.contoso.local"

```

```PowerShell
Context "Try to Set URLs with Regex" {
        $Content = $Content -replace "localhost:8000", "app-dev.contoso.local"
        [xml]$xml = $Content
        it "We don't want to change service addresses" {
            $addresses = $xml.SelectNodes("//service/endpoint") | 
                Foreach-Object { ( $_.Get_Attributes() |
                Where-Object { $_.Get_Name() -eq "address"} ).'#Text' }
            $addresses | Should -match "localhost:8000"
        }
        it "But we do want to change endpoint addresses"{
            $addresses = $xml.SelectNodes("//client/endpoint") | 
                Foreach-Object { ( $_.Get_Attributes() |
                Where-Object { $_.Get_Name() -eq "address"} ).'#Text' }
            $addresses | Should -match "app-dev.contoso.local"
        }
    }

  Context Try to Set URLs with Regex
    [+] We don't want to change service addresses 31ms
    [-] But we do want to change endpoint addresses 9ms
      Expected regular expression 'app-dev.contoso.local' to match 'http://localhost:8000/ServiceModelSamples/service.svc', but it did not
match.
      18:             $addresses | Should -match "app-dev.contoso.local"
      at <ScriptBlock>, C:\onedrive\OneDrive - StrategicTech.io\dev\blog\powershell\XML-Powershell\01.ps1: line 18
```

Writing a regular expression to safely identify the nodes we're trying to identify is not feasible. The number of valid ways for XML to be formatted is statistically significant.


Without using Regex or XPath, our code needs to essentially traverse the XML tree with a bunch of where-objects. 

```PowerShell
$configuration = $XmlDocument.ChildNodes | ? {$_.Get_Name() -eq "configuration"}
$servicemodel  = $configuration.ChildNodes | ? {$_.Get_Name() -eq "system.servicemodel"}
$client        = $servicemodel.ChildNodes | ? {$_.Get_Name() -eq "client"}
$endpoints     = $client.ChildNodes | ? {$_.Get_Name() -eq "endpoint"}

foreach ( $endpoint in $endpoints )
{
    $endpoint.address = $endpoint.address -replace "localhost:8000", "app-dev.contoso.local"
}
```

## 3. Updating Values with XPath

XPath makes things much, much simpler.

Here, we're making all the URLs https://, including both services and client config. This could be tailored to one or the other by selecting nodes on //service/endpoint or //client/endpoint.

```PowerShell
foreach ( $endpoint in $XmlDocument.SelectNodes("//endpoint") )
{
    $endpoint.address = $endpoint.address -replace "http:","https:"
}
```

## 4. Conclusion

I hope this has been a good introduction to some of the inconsistencies that real-world XML can throw at parsing. These were relatively minor, in comparison to some I've faced.

Finding a primary key among 200 haphazardly named nodes, some with names, some without -- was an interesting challenge.

Next up, we're going to look at formatting and sorting XML. This can be used to help compare changes, standardize en-masse, and make the XML more human-readable.


<div class="PageNavigation">
  {% if page.previous.url %}
    <a class="prev" href="{{page.previous.url}}">&laquo; {{page.previous.title}}</a>
  {% endif %}
  {% if page.next.url %}
    <a class="next" href="{{page.next.url}}">{{page.next.title}} &raquo;</a>
  {% endif %}
</div>